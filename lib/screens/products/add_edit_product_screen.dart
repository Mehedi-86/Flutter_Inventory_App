import 'package:flutter/material.dart';
import '../../data/models/product_model.dart';
import '../../data/models/category_model.dart';
import '../../data/services/category_service.dart';
import '../../data/services/product_service.dart';

class AddEditProductScreen extends StatefulWidget {
  final Product? product;
  final Category? category;

  const AddEditProductScreen({
    super.key,
    this.product,
    this.category,
  });

  @override
  State<AddEditProductScreen> createState() => _AddEditProductScreenState();
}

class _AddEditProductScreenState extends State<AddEditProductScreen> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameController;
  late TextEditingController _skuController;
  late TextEditingController _quantityController;
  late TextEditingController _priceController;
  late TextEditingController _reorderController;
  Category? _selectedCategory;
  late bool _isEditing;

  final Stream<List<Category>> _categoriesStream = CategoryService.instance.getCategoriesStream();

  @override
  void initState() {
    super.initState();
    _isEditing = widget.product != null;

    _nameController = TextEditingController(text: widget.product?.name ?? '');
    _skuController = TextEditingController(text: widget.product?.sku ?? '');
    _quantityController = TextEditingController(text: widget.product?.quantity.toString() ?? '0');
    _priceController = TextEditingController(text: widget.product?.unitPrice.toString() ?? '0.0');
    _reorderController = TextEditingController(text: widget.product?.reorderLevel.toString() ?? '10');

    if (widget.category != null) {
      _selectedCategory = widget.category;
    }
  }

  @override
  void dispose() {
    _nameController.dispose();
    _skuController.dispose();
    _quantityController.dispose();
    _priceController.dispose();
    _reorderController.dispose();
    super.dispose();
  }

  void _onSave() async {
    if (_formKey.currentState!.validate()) {
      final productData = Product(
        id: _isEditing ? widget.product!.id : '', // ID will be generated by Firestore on add
        name: _nameController.text,
        sku: _skuController.text,
        categoryId: _selectedCategory!.id,
        quantity: int.parse(_quantityController.text),
        unitPrice: double.parse(_priceController.text),
        reorderLevel: int.parse(_reorderController.text),
      );

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(_isEditing ? 'Updating Product...' : 'Adding Product...')),
      );

      if (_isEditing) {
        await ProductService.instance.updateProduct(productData);
      } else {
        await ProductService.instance.addProduct(productData);
      }

      if (mounted) {
        Navigator.of(context).pop();
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(_isEditing ? 'Edit Product' : 'Add New Product'),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(24.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(labelText: 'Product Name', border: OutlineInputBorder()),
                validator: (value) => value!.isEmpty ? 'Please enter a name' : null,
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _skuController,
                decoration: const InputDecoration(labelText: 'SKU', border: OutlineInputBorder()),
                validator: (value) => value!.isEmpty ? 'Please enter a SKU' : null,
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _quantityController,
                decoration: const InputDecoration(labelText: 'Quantity', border: OutlineInputBorder()),
                keyboardType: TextInputType.number,
                validator: (value) => int.tryParse(value!) == null ? 'Please enter a valid number' : null,
              ),
              const SizedBox(height: 16),
               TextFormField(
                controller: _priceController,
                decoration: const InputDecoration(labelText: 'Unit Price', border: OutlineInputBorder()),
                keyboardType: const TextInputType.numberWithOptions(decimal: true),
                validator: (value) => double.tryParse(value!) == null ? 'Please enter a valid price' : null,
              ),
              const SizedBox(height: 16),
               TextFormField(
                controller: _reorderController,
                decoration: const InputDecoration(labelText: 'Re-order Level', border: OutlineInputBorder()),
                keyboardType: TextInputType.number,
                validator: (value) => int.tryParse(value!) == null ? 'Please enter a valid number' : null,
              ),
              const SizedBox(height: 16),
              StreamBuilder<List<Category>>(
                stream: _categoriesStream,
                builder: (context, snapshot) {
                  if (!snapshot.hasData) {
                    return const Center(child: CircularProgressIndicator());
                  }
                  final categories = snapshot.data!;
                  
                  if (_isEditing && _selectedCategory == null) {
                    try {
                      _selectedCategory = categories.firstWhere((cat) => cat.id == widget.product!.categoryId);
                    } catch (e) {
                      _selectedCategory = null;
                    }
                  } else if (widget.category != null && _selectedCategory == null) {
                      _selectedCategory = categories.firstWhere((c) => c.id == widget.category!.id);
                  }

                  return DropdownButtonFormField<Category>(
                    initialValue: _selectedCategory,
                    decoration: const InputDecoration(labelText: 'Category', border: OutlineInputBorder()),
                    items: categories.map((Category category) {
                      return DropdownMenuItem<Category>(
                        value: category,
                        child: Text(category.name),
                      );
                    }).toList(),
                    onChanged: (newValue) {
                      setState(() {
                        _selectedCategory = newValue;
                      });
                    },
                    validator: (value) => value == null ? 'Please select a category' : null,
                  );
                },
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: _onSave,
                style: ElevatedButton.styleFrom(padding: const EdgeInsets.symmetric(vertical: 16)),
                child: Text(_isEditing ? 'Update Product' : 'Add Product'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
